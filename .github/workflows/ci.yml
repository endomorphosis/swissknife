name: SwissKnife CI

on:
  push:
    branches: [ main, master ] # Adjust branch names as needed
  pull_request:
    branches: [ main, master ] # Adjust branch names as needed

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x] # Test on relevant Node.js versions

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 8 # Specify pnpm version if needed

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run ESLint
      run: pnpm run lint # Assuming 'lint' script exists in package.json

    - name: Run TypeScript Check
      run: pnpm run typecheck # Assuming 'typecheck' script exists (e.g., tsc --noEmit)

    - name: Run Tests
      run: pnpm run test # Assuming 'test' script exists in package.json

    - name: Lint code
      run: npm run lint
      continue-on-error: true

    - name: Type check
      run: npm run typecheck
      continue-on-error: true

    - name: Generate docs
      run: npm run docs
      continue-on-error: true

    - name: Upload documentation artifact
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/generated
        if-no-files-found: ignore

  test:
    name: Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Run tests with different categories
      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          SILENT_TESTS: 'true'

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          SILENT_TESTS: 'true'

      - name: Run Graph-of-Thought tests
        run: npm run test -- test/examples/graph
        env:
          NODE_ENV: test
          SILENT_TESTS: 'true'

      - name: Run Fibonacci Heap Scheduler tests
        run: npm run test -- test/examples/scheduler
        env:
          NODE_ENV: test
          SILENT_TESTS: 'true'

      - name: Run end-to-end tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          SILENT_TESTS: 'true'

      # Generate and upload coverage
      - name: Generate coverage report
        run: npm run test:coverage
        env:
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage/
          fail_ci_if_error: false

      # Upload test results
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            junit.xml
            coverage/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Use Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Run snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Use Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        env:
          NODE_ENV: production

      - name: Build
        run: npm run build
        env:
          NODE_ENV: production

      - name: Run build verification tests
        run: npm run test:verify-build
        env:
          NODE_ENV: production
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: |
            cli.mjs
            dist/
            
  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Use Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: .

      - name: Run benchmarks
        run: npm run benchmark
        continue-on-error: true

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results/
          if-no-files-found: ignore